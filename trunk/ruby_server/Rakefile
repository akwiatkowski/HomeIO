#!/usr/bin/ruby
#encoding: utf-8

# This file is part of HomeIO.
#
#    HomeIO is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    HomeIO is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.


require 'rubygems'
require 'rake'
require 'rake/clean'
require 'rake/gempackagetask'
require 'rake/rdoctask'
require 'rake/testtask'

spec = Gem::Specification.new do |s|
  s.name = 'HomeIO'
  s.version = '0.0.3'
  s.has_rdoc = true
  s.extra_rdoc_files = ['README', 'LICENSE']
  s.summary = 'Control system for home use'
  s.description = s.summary
  s.author = 'Aleksander Kwiatkowski'
  s.email = 'bobikx@poczta.fm'
  s.files = %w(LICENSE README Rakefile) + Dir.glob("{bin,lib,spec}/**/*")
  s.require_path = "lib"
  s.bindir = "lib"
end

Rake::GemPackageTask.new(spec) do |p|
  p.gem_spec = spec
  p.need_tar = true
  p.need_zip = true
end

Rake::RDocTask.new do |rdoc|
  files =['README', 'LICENSE', 'lib/**/*.rb']
  rdoc.rdoc_files.add(files)
  rdoc.main = "README" # page to start on
  rdoc.title = "HomeIO"
  rdoc.rdoc_dir = 'doc/rdoc' # rdoc output folder
  rdoc.options << '--line-numbers'
end

Rake::TestTask.new do |t|
  t.test_files = FileList['test/**/*.rb']
end

# addition tasks
namespace :db do

  desc 'Initialize DBs'
  task :init do
    require './lib/storage/storage.rb'
    Storage.instance.init
  end

#  desc 'Initialize DBs (some dev fixes)'
#  task :init_tmp do
#    require './lib/storage/storage.rb'
#    StorageActiveRecord.instance
#    ActiveRecordInitMigration2.up
#  end

  desc 'Destroy DB tables'
  task :destroy do
    require 'lib/storage/storage'
    Storage.instance.destroy
  end

  desc 'Force update logged mark for faster searching'
  task :update_logged_mark do
    require 'lib/storage/storage'
    StorageActiveRecord.instance.update_logged_flag
  end

end

namespace :metar do

  # file name for setting which cities process
  DEFINED_CITIES_TO_PROCESS_FILE = 'RakeCitiesToProcess.yml'
  # when true defined cities are processed in reverse order
  REVERSE_CITIES = true

  namespace :process do

    desc 'Process all metars logged in raw format'
    task :all do
      require 'lib/metar/metar_mass_processor'
      MetarMassProcessor.instance.process_all
    end

    desc 'Process all CITY metars logged in raw format'
    task :city do
      require 'lib/metar_logger'
      puts MetarLogger.instance.get_logged_cities.collect { |c| "#{c[:code]} - #{c[:name]} (#{c[:country]})" }.join("\n")

      puts "Choose city:"
      city = STDIN.gets.strip

      if metar_cities.select { |c| c[:code] == city }.size == 1
        puts "Processing #{city}"
        MetarMassProcessor.instance.process_all_for_city(city)
      end
    end

    desc "Create list of all logged cities in '#{DEFINED_CITIES_TO_PROCESS_FILE}'"
    task :redefine do
      require 'lib/metar_logger'
      cities = MetarLogger.instance.get_logged_cities.collect { |c| c[:code] }
      File.open(DEFINED_CITIES_TO_PROCESS_FILE, 'w') do |out|
        YAML.dump(cities, out)
      end
    end

    desc "Process all cities from '#{DEFINED_CITIES_TO_PROCESS_FILE}'"
    task :predefined do
      require 'lib/metar/metar_mass_processor'
      cities = YAML::load_file(DEFINED_CITIES_TO_PROCESS_FILE)
      cities = cities.reverse if REVERSE_CITIES == true
      cities.each do |c|
        MetarMassProcessor.instance.process_all_for_city(c)
      end
    end
  end
end

# stars server
namespace :supervisor do

  desc 'Start backend'
  task :backend do
    require 'lib/supervisor_backend'
    SupervisorBackend.new
  end

  desc 'Start IM server'
  task :im do
    require 'lib/supervisor_im'
    SupervisorIm.new

#    require 'lib/plugins/im/im_bots'
#    im = ImBots.instance
#    puts "IM bots starting at #{Time.now}"
#    im.start_loop
  end

end

# tcp client commands

namespace :client do

  desc 'Ping server'
  task :ping do
    require "lib/communication/task_server/tcp_comm_task_client"
    command = { :command => :ping, :now => true }
    response = TcpCommTaskClient.instance.send_to_server_and_wait(command)
    puts response.inspect
  end

  desc 'Test command processor'
  task :test do
    require "lib/communication/task_server/tcp_comm_task_client"
    command = { :command => :test }
    response = TcpCommTaskClient.instance.send_to_server_and_wait(command)
    puts response.inspect
  end

  desc 'Test command processor (wait)'
  task :test_now do
    require "lib/communication/task_server/tcp_comm_task_client"
    command = { :command => :test, :now => true }
    response = TcpCommTaskClient.instance.send_to_server(command)
    puts response.inspect
  end

  desc 'Fetch queue'
  task :queue do
    require "lib/communication/task_server/tcp_comm_task_client"
    command = { :command => :queue }
    response = TcpCommTaskClient.instance.send_to_server(command)
    puts response.to_yaml
  end

  # metar and weather fetching is in backend threaded loops

end

namespace :action do

  desc 'Fetch weather (supervisor not needed)'
  task :fetch_weather do
    t = Time.now
    require 'lib/weather_ripper'
    w = WeatherRipper.instance
    w.fetch
    puts "Time: #{Time.now.to_f - t.to_f}"
  end

  desc 'Fetch weather and then metar (supervisor not needed)'
  task :fetch_weather_metar do
    t = Time.now
    require 'lib/weather_ripper'
    w = WeatherRipper.instance
    w.fetch

    require 'lib/metar_logger'
    Thread.abort_on_exception = true
    m = MetarLogger.instance
    output = m.fetch_and_store
    puts "Time: #{Time.now.to_f - t.to_f}"
  end

  desc 'Fetch METAR (supervisor not needed)'
  task :fetch_metar do
    t = Time.now
    require 'lib/metar_logger'
    Thread.abort_on_exception = true
    m = MetarLogger.instance
    output = m.fetch_and_store
    puts "Time: #{Time.now.to_f - t.to_f}"
  end

end


namespace :gems do
  require 'rubygems'

  task :install do
    # defaults to --no-rdoc, set DOCS=(anything) to build docs
    docs = (ENV['DOCS'].nil? ? '--no-rdoc' : '')
    #grab the list of gems/version to check
    config = YAML.load_file(File.join('config', 'Gems.yml'))
    gems = config[:gems]

    gems.each do |gem|
      # load the gem spec
      gem_spec = YAML.load(`gem spec #{gem[:name]} 2> /dev/null`)
      gem_loaded = false
      begin
        gem_loaded = require_gem gem[:name], gem[:version]
      rescue Exception
      end

      # if forced
      # or there is no gem_spec
      # or the spec version doesn't match the required version
      # or require_gem returns false
      # (return false also happens if the gem has already been loaded)
      if !ENV['FORCE'].nil? ||
        !gem_spec ||
        (gem_spec.version.version != gem[:version] && !gem_loaded)
        gem_config = gem[:config] ? " -- #{gem[:config]}" : ''
        source = gem[:source] || config[:source] || nil
        source = "--source #{source}" if source
        ret = system "gem install #{gem[:name]}
            -v #{gem[:version]} -y #{source} #{docs} #{gem_config}"
        # something bad happened, pass on the message
        p $? unless ret
      else
        puts "#{gem[:name]} #{gem[:version]} already installed"
      end
    end
  end
end
