# 
# To change this template, choose Tools | Templates
# and open the template in the editor.
 

require 'rubygems'
require 'rake'
require 'rake/clean'
require 'rake/gempackagetask'
require 'rake/rdoctask'
require 'rake/testtask'

spec = Gem::Specification.new do |s|
  s.name = 'WindServer_SVN'
  s.version = '0.0.1'
  s.has_rdoc = true
  s.extra_rdoc_files = ['README', 'LICENSE']
  s.summary = 'Your summary here'
  s.description = s.summary
  s.author = ''
  s.email = ''
  # s.executables = ['your_executable_here']
  s.files = %w(LICENSE README Rakefile) + Dir.glob("{bin,lib,spec}/**/*")
  s.require_path = "lib"
  s.bindir = "bin"
end

Rake::GemPackageTask.new(spec) do |p|
  p.gem_spec = spec
  p.need_tar = true
  p.need_zip = true
end

Rake::RDocTask.new do |rdoc|
  files =['README', 'LICENSE', 'lib/**/*.rb']
  rdoc.rdoc_files.add(files)
  rdoc.main = "README" # page to start on
  rdoc.title = "WindServer_SVN Docs"
  rdoc.rdoc_dir = 'doc/rdoc' # rdoc output folder
  rdoc.options << '--line-numbers'
end

Rake::TestTask.new do |t|
  t.test_files = FileList['test/**/*.rb']
end

# addition taks
namespace :db do

  desc 'Initialize DBs'
  task :init do
    require './lib/storage/storage.rb'
    Storage.instance.init
  end

  desc 'Clean DBs'
  task :deinit do
    require './lib/storage/storage.rb'
    Storage.instance.deinit
  end

  desc 'Populate cities'
  task :pop_cities do
    require './lib/storage/storage.rb'
    StorageActiveRecord.instance
    City.create_from_config
  end

end

namespace :metar do

  namespace :process do

    desc 'Process all metars logged in raw format'
    task :all do
      #require './lib/metar_logger.rb'
      #MetarLogger.instance.processor.process_all
      require './lib/metar/metar_mass_processor.rb'
      MetarMassProcessor.new.process_all
    end

    desc 'Process all CITY metars logged in raw format'
    task :city do
      #require './lib/metar_logger.rb'
      #MetarLogger.instance.processor.process_all

      require './lib/metar/metar_mass_processor.rb'
      mmp = MetarMassProcessor.new
      
      # list metar cities to process
      logged_cities = mmp.cities # logged on disk
      metar_cities = MetarLogger.instance.cities # defined
      # only cities which has logs
      metar_cities = metar_cities.select{|c| ( [ c[:code] ] & logged_cities ).size == 1 }
      # list of cities
      puts metar_cities.sort{|c,d| c[:code] <=> d[:code]}.collect{|c| "#{c[:code]} - #{c[:name]} (#{c[:country]})"}.join("\n")

      puts "Choose city:"
      city = STDIN.gets.strip

      if metar_cities.select{|c| c[:code] == city}.size == 1
        puts "Processing #{city}"
        MetarMassProcessor.new.process_all_for_city( city )
      end
    end

  end

end

# stars server
namespace :supervisor do

  desc 'Start supervisor server'
  task :start do
    require './lib/supervisor/supervisor.rb'
    s = Supervisor.instance
    s.start
  end

  desc 'Start jabber server'
  task :jabber do
    require './lib/plugins/jabber/jabber_bot.rb'
    require './lib/plugins/jabber/jabber_processor.rb'
    j = JabberBot.instance
    j.start
  end

end

# tcp commands

namespace :client do

  desc 'Ping server'
  task :ping do
    require './lib/supervisor/supervisor_client.rb'
    #command = {:command => :ping, :now => true}
    command = :ping
    response = SupervisorClient.new.send_to_server( command )
    puts response.inspect
  end

  desc 'Test command processor'
  task :test do
    require './lib/supervisor/supervisor_client.rb'
    command = {:command => :test, :now => true}
    response = SupervisorClient.new.send_to_server( command )
    puts response.inspect
  end

  desc 'Process METAR for city'
  task :process_metar_city do
    require './lib/supervisor/supervisor_client.rb'
    #command = {:command => :process_metar_city, :city => 'EPPO', :now => true}
    command = {:command => :process_metar_city, :city => 'EPPO'}
    response = SupervisorClient.new.send_to_server( command )
    puts response.inspect
  end

  # Send task to queue
  desc 'Fetch weather (non wait)'
  task :fetch_weather do
    require './lib/supervisor/supervisor_client.rb'
    command = {:command => :fetch_weather}
    response = SupervisorClient.new.send_to_server( command )
    puts response.inspect
  end

  # Send task and wait for answer
  desc 'Fetch weather (wait for end)'
  task :fetch_weather_wait do
    require './lib/supervisor/supervisor_client.rb'
    command = {:command => :fetch_weather}
    response = SupervisorClient.new.send_to_server( command )
    last_response = SupervisorClient.wait_for_task( response[:id] )
    puts last_response.inspect
  end

  # Send task and do it now
  desc 'Fetch weather (now!)'
  task :fetch_weather_now do
    require './lib/supervisor/supervisor_client.rb'
    command = {:command => :fetch_weather, :now => true}
    response = SupervisorClient.new.send_to_server( command )
    puts response.inspect
  end


  # Send task to queue
  desc 'Fetch METAR (non wait)'
  task :fetch_metar do
    require './lib/supervisor/supervisor_client.rb'
    command = {:command => :fetch_metar}
    response = SupervisorClient.new.send_to_server( command )
    puts response.inspect
  end

  # Send task and wait for answer
  desc 'Fetch METAR (wait)'
  task :fetch_metar_wait do
    require './lib/supervisor/supervisor_client.rb'
    command = {:command => :fetch_metar}
    response = SupervisorClient.new.send_to_server( command )
    last_response = SupervisorClient.wait_for_task( response[:id] )
    puts last_response.inspect
  end

  # Send task and do it now
  desc 'Fetch METAR (now!)'
  task :fetch_metar_now do
    require './lib/supervisor/supervisor_client.rb'
    command = {:command => :fetch_metar, :now => true}
    response = SupervisorClient.new.send_to_server( command )
    puts response.inspect
  end


end

namespace :action do

  desc 'Fetch weather'
  task :fetch_weather do
    require './lib/weather_ripper.rb'
    w = WeatherRipper.instance
    w.fetch
  end

  desc 'Fetch weather and then metar'
  task :fetch_weather_metar do
    require './lib/weather_ripper.rb'
    w = WeatherRipper.instance
    w.fetch

    require './lib/metar_logger.rb'
    Thread.abort_on_exception = true
    m = MetarLogger.instance
    output = m.fetch_and_store
  end

  desc 'Fetch METAR'
  task :fetch_metar do
    require './lib/metar_logger.rb'
    Thread.abort_on_exception = true
    m = MetarLogger.instance
    output = m.fetch_and_store
  end

end



namespace :gems do

  desc 'Install required gems'
  task :install do
    `gem install geokit`
    `gem install mysql`
    `gem install serialport`
    `gem install hpricot`
    `gem install rmagick`
  end

end

