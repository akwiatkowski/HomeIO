== HomeIO - backend specification

= Terminology

* meas - acronym of measurement
* overseer - controlling object which has own algorith (Proc like object) for
  monitoring and controlling process
* DB - database

= Tasks - main classes

Deamonized tasks:
- MetarLogger
- WeatherRipper
- MeasFetcher
- OverseersMaster

All main threads has self cron like threads. Then task is started start time is
stored +t+ and later anfter it finish it wait when <tt>Time.now - t > interval</tt>.

Executable on demand task:
- DbExtractor
- DbModificator
- GraphGenerator

= Plugins

What is it? Code which:
- add functionality to other main classes listed above
- become specialized object used in main classes (like PowerOverseer)

Some plugin ideas:
- PowerOverseer
- TODO...


== Class description

= MetarLogger

Description: Fetch and store weather data using METAR[http://en.wikipedia.org/wiki/METAR]

TODOs:
- Run every 30min
- Decrease verbosity because other threads print too
- Data accessible via <tt>Extractor</tt> singleton, does not (need to) share
  data for other components
- Metar code processor should be usable from rails model to get specials from raw
  metar code


= WeatherRipper

Description: Fetch and store weather data using providers. It is easy to modify,
and create new providers.

TODOs:
- Run every 1 or 2h
- Decrease verbosity a little (make shorter), but add wind speed, rain, snow,
  and pressure if available
- Data accessible via <tt>Extractor</tt>, does not (need to) share data for other components


= MeasFetcher

Description: Fetch and log measured data using +IoServer+.

TODOs:
- If enabled do test connection, send 't', receive and check. When failed
- Timeout (ex. 200ms) implementation, ignore
- <tt>Meas</tt>es are fetched very often via <tt>IoServer</tt>, probably
  every 100ms at default/minimal time
- Every ex. 5s they are printed on screen as a summary
- Has <tt>MeasTypesArray</tt> - table of all predefined <tt>Meas</tt>
- Run every some time (ex. 15m) connection test.


= OverseersMaster

Description: Generate threads for controlling system.

TODOs:
- Think about predefined <tt>Algorithm</tt>s for <tt>Action</tt>s.
- Plugins can add new algorithms to pool
- User can choose algorithm, change parameter
- User can not manipulate running control unit
- User can restart them


= DbExtractor

Description: Singleton for extracting and simple processing of data stored
in DB using active record.

TODOs:
- Change class name
- +Overseer+ can use +MeasFetcher+ and +DbExtractor+


= DbModificator

Description: Singleton for modifying data in DB. Logged data is not modified.

TODOs:
- Make TODO as it go
- No use exemples availabe at the moment, sorry, maybe when there will be need
  to clean logged data



= GraphGenerator

Description: Singleton for modifying data in DB. Logged data is not modified.

TODOs:
- Make TODO as it go
- No use exemples availabe at the moment, sorry, maybe when there will be need
  to clean logged data


= PowerOverseer

Description: Acts like normal +Overseer+ but has specialized algorithms for
home power generators (fuel powered, wind turbine, solar), and inverters.
Purpose of this plugin is to maximize utilization and safety for home energy system.

At the moment this plugin will use only wind turbine. So it has only 1
suboverseer +PowerWindOverseer+

TODOs:
- Process data every 15m
- Get current wind speed for site via DbExtractor, and prediction for average speed for another
  6 hours, and day, and past 6 hours
- Get generated energy amount for past 6 hours
- Calculate power/wind speed ratio
- Predict energy calucation
- Store prediction
- TODO what else?




---

Overseet
- download all overseer parameters in 1 step, and then use them when creating
overseet threads



= IoServer

* what if command parameters were bad? add timeout
* rs port and tcp port default values and command line

= IM server

= <tt>MeasTypesArray</tt>
* store all <tt>MeasType</tt>

= <tt>Meas</tt>
1. Signle type of measurement
2. Parameters:
   - values array:
     * defined size
     * methods for last (value, time), and logged (value, time)
     * methods for avg for x last measurements
     * store array of value, time, raw_value, coefs (linear and offset)
   - unit, ex. 'V'
   - internationalized description - hashlike,
     ex. {:en = 'Battery voltage', :pl => 'NapiÄ™cie na akumulatorach'}
   - log conditions:
     * min - do not log more frequent than this, default 100ms
     * max - do not log less frequent than this, default 300s
     * sig_change - when above conditions does not solve situation
       difference from last logged value higher than this will enforce logging
   - total counts:
     * measurements fetched from <tt>IoServer</tt>
     * logged
   - command - ascii or int
     * response length - bytes count
     * frequency - 1 every meas fetch loop (ex. 100ms), 2 every 200ms, ...
     * standard value - min, max, normal - used graphs
   - other accessors:
     * value - last value from values array
     * time - as above


Rails application:
- user registration with needed admin acceptation
- user roles
- graph creator

= <tt>MeasArchive</tt>
1. Rails model
2. Accessors 'utime_from', 'utime_to' for fixig missing microsends

--
List of main threads:

Use RobustThread, all exceptions should be logged in RobustThread.log. Other classes should use exception logging with begin-rescue on their own.




Meas parameters:

!! read legacy edition

Action

Overseer:
- can send communication via all IM channels


IM Bots:
- refactor to other server due to library instability
- find out best interprocess communication, possible not TCP
- both sides can start transmission


All this object will be stored every some time in yaml or db

++